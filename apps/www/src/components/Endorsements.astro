---
import { Image } from 'astro:assets';
import { twMerge } from 'tailwind-merge';
import Link from './ui/Link.astro';

interface RoleWithLink {
	text: string;
	companyName: string;
	companyUrl: string;
}

interface Endorsement {
	text: string;
	author: {
		name: string;
		social?: string;
	};
	relation: string;
	role: string | RoleWithLink;
	imageUrl: ImageMetadata;
}

interface Props {
	endorsements: readonly Endorsement[];
	class?: string;
}

const { endorsements, class: classes } = Astro.props;
---

<div class={twMerge('columns-1 gap-8 lg:columns-2', classes)}>
	{
		endorsements.map((endorsement, index) => (
			<div class:list={['rounded-lg bg-white p-8 shadow-md shadow-indigo-200', index > 0 && 'mt-8']}>
				<p class="text-sm font-semibold tracking-wide text-indigo-800 uppercase">{endorsement.relation}</p>
				<blockquote>
					<p class="text-lg leading-relaxed text-slate-700">"{endorsement.text}"</p>
				</blockquote>

				<div class="mt-6 flex items-center gap-4">
					<Image
						src={endorsement.imageUrl}
						alt={endorsement.author.name}
						width={48}
						height={48}
						format="webp"
						class="rounded-full object-cover"
					/>
					<div>
						<div class="font-semibold text-slate-900">
							{endorsement.author.social ? (
								<Link href={endorsement.author.social}>{endorsement.author.name}</Link>
							) : (
								endorsement.author.name
							)}
						</div>
						<p class="text-sm text-slate-600">
							{typeof endorsement.role === 'string' ? (
								endorsement.role
							) : (
								<>
									{endorsement.role.text} at{' '}
									<Link href={endorsement.role.companyUrl}>{endorsement.role.companyName}</Link>
								</>
							)}
						</p>
					</div>
				</div>
			</div>
		))
	}
</div>
