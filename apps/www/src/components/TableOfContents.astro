---
import { twMerge } from 'tailwind-merge';

interface Props {
	headings: {
		depth: number;
		slug: string;
		text: string;
	}[];
	class?: string;
}

const { headings, class: classes } = Astro.props;
---

<nav class={twMerge('', classes)}>
	<ul class="space-y-2">
		{
			headings.map((heading) => (
				<li
					class:list={[
						'hover:text-blue-600',
						{
							'pl-4': heading.depth === 3,
							'pl-6': heading.depth === 4,
							'pl-8': heading.depth === 5,
							'pl-10': heading.depth === 6,
						},
					]}
				>
					<a
						href={`#${heading.slug}`}
						class="toc-link block text-sm transition-colors duration-200"
						data-heading-id={heading.slug}
					>
						{heading.text}
					</a>
				</li>
			))
		}
	</ul>
</nav>

<script>
	function updateActiveHeading() {
		const observer = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					const id = entry.target.getAttribute('id');
					const tocLink = document.querySelector(`[data-heading-id="${id}"]`);

					if (entry.isIntersecting) {
						document.querySelectorAll('.toc-link').forEach((link) => {
							link.classList.remove('text-blue-600');
						});
						tocLink?.classList.add('text-blue-600');
					}
				});
			},
			{
				rootMargin: '-100px 0px -66% 0px',
				threshold: 1.0,
			},
		);

		document.querySelectorAll('h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]').forEach((heading) => {
			observer.observe(heading);
			// Add scroll margin to match sticky top offset
			(heading as HTMLElement).style.scrollMarginTop = '96px';
		});

		document.querySelectorAll('.toc-link').forEach((link) => {
			link.addEventListener('click', () => {
				document.querySelectorAll('.toc-link').forEach((l) => {
					l.classList.remove('text-blue-600');
				});
				link.classList.add('text-blue-600');
			});
		});
	}

	document.addEventListener('astro:page-load', updateActiveHeading);
</script>
