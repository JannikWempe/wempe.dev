---
interface Props {
	headings: {
		depth: number;
		slug: string;
		text: string;
	}[];
}

const { headings } = Astro.props;
---

<nav class="sticky top-24 max-h-[calc(100vh-8rem)] w-64 overflow-auto">
	<ul class="space-y-2">
		{
			headings.map((heading) => (
				<li
					class:list={[
						'hover:text-blue-600',
						{
							'pl-4': heading.depth === 3,
							'pl-6': heading.depth === 4,
							'pl-8': heading.depth === 5,
							'pl-10': heading.depth === 6,
						},
					]}
				>
					<a
						href={`#${heading.slug}`}
						class="toc-link block text-sm transition-colors duration-200"
						data-heading-id={heading.slug}
					>
						{heading.text}
					</a>
				</li>
			))
		}
	</ul>
</nav>

<script>
	function updateActiveHeading() {
		const observer = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					const id = entry.target.getAttribute('id');
					const tocLink = document.querySelector(`[data-heading-id="${id}"]`);

					if (entry.isIntersecting) {
						// Remove active class from all links
						document.querySelectorAll('.toc-link').forEach((link) => {
							link.classList.remove('text-blue-600');
						});
						// Add active class to current link
						tocLink?.classList.add('text-blue-600');
					}
				});
			},
			{
				rootMargin: '-100px 0px -66% 0px',
				threshold: 1.0,
			},
		);

		// Observe all headings
		document.querySelectorAll('h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]').forEach((heading) => {
			observer.observe(heading);
		});
	}

	// Update active heading when the page loads
	updateActiveHeading();

	// Update active heading when client-side navigation occurs
	document.addEventListener('astro:page-load', updateActiveHeading);
</script>
