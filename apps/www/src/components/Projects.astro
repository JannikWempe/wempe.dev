---
import { Image } from 'astro:assets';
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

interface Props {
	limit?: number;
	class?: string;
}

type Project = CollectionEntry<'projects'>['data']

const { class: classes, limit } = Astro.props;

const allProjects = await getCollection('projects');
const projects = limit ? allProjects.slice(0, limit) : allProjects;

const techIcons: Record<Project['tech'][number], string> = {
	TypeScript: 'logos:typescript-icon',
	Gatsby: 'logos:gatsby',
	React: 'logos:react',
	ChakraUI: 'chakra-ui',
	Framer: 'logos:framer',
	Netlify: 'logos:netlify-icon',
	'Decap CMS': 'decap-cms',
	Astro: 'logos:astro-icon',
	SolidJS: 'logos:solidjs-icon',
	TailwindCSS: 'logos:tailwindcss-icon',
	Remix: 'logos:remix-icon',
	SST: 'logos:sst-icon',
	'AWS CDK': 'cdk',
	AWS: 'logos:aws',
	Supabase: 'logos:supabase-icon',
	PostgreSQL: 'logos:postgresql',
	MySQL: 'logos:mysql',
	PHP: 'logos:php',
	Wordpress: 'logos:wordpress-icon',
	WooCommerce: 'logos:woocommerce-icon',
	NextJS: 'logos:nextjs-icon',
	PWA: 'logos:pwa',
	Vercel: 'logos:vercel-icon',
	Strapi: 'logos:strapi-icon',
	'Shopify Hydrogen': 'hydrogen',
	Turso: 'turso',
};

const typeToColorMap: Record<Project['type'], { bg: string; text: string }> = {
	website: {
		bg: 'bg-purple-100',
		text: 'text-purple-700',
	},
	'Shopify app': {
		bg: 'bg-green-100',
		text: 'text-green-700',
	},
	SaaS: {
		bg: 'bg-blue-100',
		text: 'text-blue-700',
	},
	eCommerce: {
		bg: 'bg-yellow-100',
		text: 'text-yellow-700',
	},
	PWA: {
		bg: 'bg-pink-100',
		text: 'text-pink-700',
	},
};

const statusToColorMap: Record<Project['status'], { bg: string; text: string }> = {
	ongoing: {
		bg: 'bg-blue-100',
		text: 'text-blue-700',
	},
	done: {
		bg: 'bg-green-100',
		text: 'text-green-700',
	},
	paused: {
		bg: 'bg-slate-100',
		text: 'text-slate-700',
	},
	sold: {
		bg: 'bg-yellow-100',
		text: 'text-yellow-700',
	},
};
---

<ul class={twMerge('grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3', classes)}>
	{
		projects.map((project, projectIndex) => {
			return (
				<li
					class="relative flex flex-col gap-5 overflow-hidden rounded-lg bg-white p-4 shadow-md shadow-indigo-200 transition-shadow duration-300 focus-within:ring-4 focus-within:ring-indigo-500 focus-within:ring-offset-4 hover:shadow-lg hover:shadow-indigo-200"
					style={{ transform: 'translateZ(0)' }}
				>
					<div class="relative grow">
						<Image
							src={project.data.logo}}
							alt={`${project.data.title} logo`}
							height={50}
							format="avif"
							class="h-[50px] w-auto! self-start object-contain"
						/>
						<h3 class="mt-3 text-xl font-bold text-pretty text-indigo-900">{project.data.title}</h3>
						<p class="mt-3 text-slate-700">{project.data.description}</p>
					</div>

					<a href={project.data.url} class="absolute inset-0 active:ring-2 active:ring-indigo-500">
						<span class="sr-only">Visit {project.data.title}</span>
					</a>

					<div class="mt-auto">
						<div class="flex shrink-0 gap-2">
							<div
								class:list={[
									'flex items-center gap-1 rounded-full px-3 py-1',
									typeToColorMap[project.data.type].bg,
									typeToColorMap[project.data.type].text,
								]}
							>
								<Icon name="lucide:tag" class="h-3 w-auto" />
								<span class="text-xs font-medium tracking-wide">{project.data.type}</span>
							</div>

							<div
								class:list={[
									'flex items-center gap-1 rounded-full px-3 py-1',
									statusToColorMap[project.data.status].bg,
									statusToColorMap[project.data.status].text,
								]}
							>
								<Icon name="lucide:waypoints" class="h-3 w-auto" />
								<span class="text-xs font-medium tracking-wide">{project.data.status}</span>
							</div>
						</div>

						<div class="z-20 flex items-center gap-4 pt-4 pr-4">
							{project.data.tech.map((tech, techIndex) => (
								<div class="relative">
									<Icon
										name={techIcons[tech]}
										class="peer h-5 w-auto"
										aria-describedby={`tooltip-${projectIndex}-${techIndex}`}
									/>
									<span
										role="tooltip"
										id={`tooltip-${projectIndex}-${techIndex}`}
										class="absolute bottom-5 left-0 z-10 hidden w-auto rounded-sm bg-slate-100 p-1 text-slate-600 shadow-lg peer-[:hover]:block"
									>
										{tech}
									</span>
								</div>
							))}
						</div>
					</div>
				</li>
			);
		})
	}
</ul>
